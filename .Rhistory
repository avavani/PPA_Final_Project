source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
ggplot(testProbs, aes(x = probs, fill = as.factor(class))) +
geom_density() +
facet_grid(class ~ .) +
scale_fill_manual(values = palette_4_colors) + xlim(0, 1) +
labs(x = "Gentrify", y = "Density of probabilities",
title = "Distribution of predicted probabilities by observed outcome") +
plotTheme() + theme(strip.text.x = element_text(size = 18),
legend.position = "none")+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(pROC)
iterateThresholds <- function(data, observedClass, predictedProbs) {
observedClass <- enquo(observedClass)
predictedProbs <- enquo(predictedProbs)
x <- 0.01
all_prediction <- data.frame()
while (x <= 1) {
this_prediction <- data %>%
mutate(predclass = ifelse(!!predictedProbs > x, 1, 0)) %>%
count(predclass, !!observedClass) %>%
summarize(
Count_TN = sum(n[predclass == 0 & !!observedClass == 0]),
Count_TP = sum(n[predclass == 1 & !!observedClass == 1]),
Count_FN = sum(n[predclass == 0 & !!observedClass == 1]),
Count_FP = sum(n[predclass == 1 & !!observedClass == 0]),
Rate_TP = Count_TP / (Count_TP + Count_FN),
Rate_FP = Count_FP / (Count_FP + Count_TN),
Rate_FN = Count_FN / (Count_FN + Count_TP),
Rate_TN = Count_TN / (Count_TN + Count_FP),
Accuracy = (Count_TP + Count_TN) / (Count_TP + Count_TN + Count_FN + Count_FP),
Threshold = round(x, 2),
.groups = 'drop'
)
all_prediction <- rbind(all_prediction, this_prediction)
x <- x + .01
}
return(all_prediction)
}
testProbs.thresholds <- iterateThresholds(
data = testProbs,
observedClass = class,
predictedProbs = probs
)
ggplot(testProbs.thresholds, aes(x = Threshold)) +
geom_line(aes(y = Accuracy, color = "Accuracy")) +
geom_line(aes(y = Rate_TP, color = "True Positive Rate")) +
geom_line(aes(y = Rate_FP, color = "False Positive Rate")) +
scale_color_manual(values = c("Accuracy" = "blue", "True Positive Rate" = "green", "False Positive Rate" = "red")) +
labs(title = "Model Performance Across Different Thresholds",
x = "Threshold", y = "Rate") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(gridExtra)
aucTable <- testProbs %>%
summarize(AUC = as.numeric(auc(roc(class, probs)))) %>%
mutate(AUC = as.character(round(AUC, 3)))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .65, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
all.acs.reg <- acs.hoods %>%
select(-(ends_with("22")),
-(ends_with("12")),
-(ends_with("17")),
-genindex,
-CSA)
train <- all.acs.reg %>%
sample_frac(.75)
train_index <- as.numeric(rownames(train))
test <- all.acs.reg[-train_index, ]
reg.gentrify <- glm(gentrify ~ ., data =
train %>%
select(-GEOID,
-ChangeInLowIncPct,
-ChangeInHighIncPct),
family = "binomial"(link = "logit"))
stargazer(reg.gentrify, type = "text", out = "regression_summary.txt", title = "Regression Results",
label = "tab:regression_results", align = TRUE,
ci = TRUE, ci.level = 0.95, single.row = TRUE,
star.cutoffs = c(0.05, 0.01, 0.001),
notes = c("*** p<0.001", "** p<0.01", "* p<0.05"),
notes.align = "l", notes.label = "Significance levels:")
testProbs <-
data.frame(class = test$gentrify,
probs = predict(reg.gentrify, test, type = "response"))
testProbs %>%
mutate(predClass = ifelse(probs >= .5, "1", "0"),
predClass = factor(predClass, levels = c("0", "1")),
class = factor(class, levels = c("0", "1"))) %>%
{ caret::confusionMatrix(.$predClass, .$class, positive = "1") }
all.acs.reg <- acs.hoods %>%
select(-(ends_with("22")),
-(ends_with("12")),
-genindex,
-CSA)
colnames(acs.hoods)
all.acs.reg <- acs.hoods %>%
select(-(ends_with("22")),
-(ends_with("12")),
-genindex,
-CSA,
-MovedWithinCounty17,
-MovedFromSameState17,
-MovedFromDifferentState17,
-MovedAbroad17,
OOSizePctChange,
ROSizePctChange)
train <- all.acs.reg %>%
sample_frac(.75)
train_index <- as.numeric(rownames(train))
test <- all.acs.reg[-train_index, ]
reg.gentrify <- glm(gentrify ~ ., data =
train %>%
select(-GEOID,
-ChangeInLowIncPct,
-ChangeInHighIncPct),
family = "binomial"(link = "logit"))
stargazer(reg.gentrify, type = "text", out = "regression_summary.txt", title = "Regression Results",
label = "tab:regression_results", align = TRUE,
ci = TRUE, ci.level = 0.95, single.row = TRUE,
star.cutoffs = c(0.05, 0.01, 0.001),
notes = c("*** p<0.001", "** p<0.01", "* p<0.05"),
notes.align = "l", notes.label = "Significance levels:")
testProbs <-
data.frame(class = test$gentrify,
probs = predict(reg.gentrify, test, type = "response"))
testProbs %>%
mutate(predClass = ifelse(probs >= .5, "1", "0"),
predClass = factor(predClass, levels = c("0", "1")),
class = factor(class, levels = c("0", "1"))) %>%
{ caret::confusionMatrix(.$predClass, .$class, positive = "1") }
p_load(ggplot2)
palette_4_colors <- c("#e4572e","#17bebb","#ffc914","#A379C9")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
ggplot(testProbs, aes(x = probs, fill = as.factor(class))) +
geom_density() +
facet_grid(class ~ .) +
scale_fill_manual(values = palette_4_colors) + xlim(0, 1) +
labs(x = "Gentrify", y = "Density of probabilities",
title = "Distribution of predicted probabilities by observed outcome") +
plotTheme() + theme(strip.text.x = element_text(size = 18),
legend.position = "none")+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
sum(is.na(test))
sum(is.na(acs.hoods))
View(acs.hoods)
acs.hoods <- acs.hoods %>%
select(-STATEFP,
-COUNTYFP,
-TRACTCE,
-NAMELSAD,
-MTFCC,
-FUNCSTAT,
-ALAND,
-AWATER,
-INTPTLAT,
-INTPTLON,
-NAME) %>%
mutate(CSA = coalesce(CSA.x, CSA.y)) %>%
select(-CSA.x, -CSA.y)%>%
st_drop_geometry()%>%
select(-geometry)%>%
left_join(tract_bids)%>%
mutate(across(where(is.numeric), ~replace_na(., 0)),
across(where(is.character), ~replace_na(., "Unknown")))
acs.hoods <- all.acs.sf %>%
st_transform(crs = st_crs(bmore_hoods))%>%
st_centroid()%>%
st_join(bmore_hoods, join = st_intersects)%>%
st_drop_geometry()%>%
left_join(bmore_CSA_data)%>%
mutate(NAME = coalesce(NAME.x, NAME.y)) %>%
select(-NAME.x, -NAME.y)
acs.hoods <- acs.hoods %>%
select(-STATEFP,
-COUNTYFP,
-TRACTCE,
-NAMELSAD,
-MTFCC,
-FUNCSTAT,
-ALAND,
-AWATER,
-INTPTLAT,
-INTPTLON,
-NAME) %>%
mutate(CSA = coalesce(CSA.x, CSA.y)) %>%
select(-CSA.x, -CSA.y)%>%
st_drop_geometry()%>%
select(-geometry)%>%
left_join(tract_bids)%>%
mutate(across(where(is.numeric), ~replace_na(., 0)),
across(where(is.character), ~replace_na(., "Unknown")))
p_load(stargazer)
all.acs.reg <- acs.hoods %>%
select(-(ends_with("22")),
-(ends_with("12")),
-genindex,
-CSA,
-MovedWithinCounty17,
-MovedFromSameState17,
-MovedFromDifferentState17,
-MovedAbroad17,
OOSizePctChange,
ROSizePctChange)
train <- all.acs.reg %>%
sample_frac(.75)
train_index <- as.numeric(rownames(train))
test <- all.acs.reg[-train_index, ]
reg.gentrify <- glm(gentrify ~ ., data =
train %>%
select(-GEOID,
-ChangeInLowIncPct,
-ChangeInHighIncPct),
family = "binomial"(link = "logit"))
stargazer(reg.gentrify, type = "text", out = "regression_summary.txt", title = "Regression Results",
label = "tab:regression_results", align = TRUE,
ci = TRUE, ci.level = 0.95, single.row = TRUE,
star.cutoffs = c(0.05, 0.01, 0.001),
notes = c("*** p<0.001", "** p<0.01", "* p<0.05"),
notes.align = "l", notes.label = "Significance levels:")
testProbs <-
data.frame(class = test$gentrify,
probs = predict(reg.gentrify, test, type = "response"))
testProbs %>%
mutate(predClass = ifelse(probs >= .5, "1", "0"),
predClass = factor(predClass, levels = c("0", "1")),
class = factor(class, levels = c("0", "1"))) %>%
{ caret::confusionMatrix(.$predClass, .$class, positive = "1") }
p_load(ggplot2)
palette_4_colors <- c("#e4572e","#17bebb","#ffc914","#A379C9")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
ggplot(testProbs, aes(x = probs, fill = as.factor(class))) +
geom_density() +
facet_grid(class ~ .) +
scale_fill_manual(values = palette_4_colors) + xlim(0, 1) +
labs(x = "Gentrify", y = "Density of probabilities",
title = "Distribution of predicted probabilities by observed outcome") +
plotTheme() + theme(strip.text.x = element_text(size = 18),
legend.position = "none")+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(pROC)
iterateThresholds <- function(data, observedClass, predictedProbs) {
observedClass <- enquo(observedClass)
predictedProbs <- enquo(predictedProbs)
x <- 0.01
all_prediction <- data.frame()
while (x <= 1) {
this_prediction <- data %>%
mutate(predclass = ifelse(!!predictedProbs > x, 1, 0)) %>%
count(predclass, !!observedClass) %>%
summarize(
Count_TN = sum(n[predclass == 0 & !!observedClass == 0]),
Count_TP = sum(n[predclass == 1 & !!observedClass == 1]),
Count_FN = sum(n[predclass == 0 & !!observedClass == 1]),
Count_FP = sum(n[predclass == 1 & !!observedClass == 0]),
Rate_TP = Count_TP / (Count_TP + Count_FN),
Rate_FP = Count_FP / (Count_FP + Count_TN),
Rate_FN = Count_FN / (Count_FN + Count_TP),
Rate_TN = Count_TN / (Count_TN + Count_FP),
Accuracy = (Count_TP + Count_TN) / (Count_TP + Count_TN + Count_FN + Count_FP),
Threshold = round(x, 2),
.groups = 'drop'
)
all_prediction <- rbind(all_prediction, this_prediction)
x <- x + .01
}
return(all_prediction)
}
testProbs.thresholds <- iterateThresholds(
data = testProbs,
observedClass = class,
predictedProbs = probs
)
ggplot(testProbs.thresholds, aes(x = Threshold)) +
geom_line(aes(y = Accuracy, color = "Accuracy")) +
geom_line(aes(y = Rate_TP, color = "True Positive Rate")) +
geom_line(aes(y = Rate_FP, color = "False Positive Rate")) +
scale_color_manual(values = c("Accuracy" = "blue", "True Positive Rate" = "green", "False Positive Rate" = "red")) +
labs(title = "Model Performance Across Different Thresholds",
x = "Threshold", y = "Rate") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(gridExtra)
aucTable <- testProbs %>%
summarize(AUC = as.numeric(auc(roc(class, probs)))) %>%
mutate(AUC = as.character(round(AUC, 3)))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .65, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(gridExtra)
aucTable <- testProbs %>%
summarize(AUC = as.numeric(auc(roc(class, probs)))) %>%
mutate(AUC = as.character(round(AUC, 3)))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .65, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(gridExtra)
aucTable <- testProbs %>%
summarize(AUC = as.numeric(auc(roc(class, probs)))) %>%
mutate(AUC = as.character(round(AUC, 3)))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .65, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
p_load(gridExtra)
aucTable <- testProbs %>%
summarize(AUC = as.numeric(auc(roc(class, probs)))) %>%
mutate(AUC = as.character(round(AUC, 3)))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .65, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .65, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
mutate(testProbs.thresholds, pointSize = ifelse(Threshold == .48, 24, 16)) %>%
ggplot(aes(Rate_FP, Rate_TP)) +
geom_point(aes(shape = pointSize)) + geom_line() + scale_shape_identity() +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
annotation_custom(tableGrob(aucTable, rows = NULL), xmin = .45, xmax = 1, ymin = 0, ymax = .45) +
labs(title="ROC Curves", x="False Positive Rate", y="True Positive Rate") +
plotTheme()+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(pacman)
p_load(dplyr, ggplot2, sf, stats, tidycensus, tidyr, mapview, tigris, tmap)
p_load(stargazer)
all.acs.reg <- acs.hoods %>%
select(-(ends_with("22")),
-(ends_with("12")),
-genindex,
-CSA,
-MovedWithinCounty17,
-MovedFromSameState17,
-MovedFromDifferentState17,
-MovedAbroad17,
OOSizePctChange,
ROSizePctChange)
train <- all.acs.reg %>%
sample_frac(.75)
train_index <- as.numeric(rownames(train))
test <- all.acs.reg[-train_index, ]
reg.gentrify <- glm(gentrify ~ ., data =
train %>%
select(-GEOID,
-ChangeInLowIncPct,
-ChangeInHighIncPct),
family = "binomial"(link = "logit"))
stargazer(reg.gentrify, type = "text", out = "regression_summary.txt", title = "Regression Results",
label = "tab:regression_results", align = TRUE,
ci = TRUE, ci.level = 0.95, single.row = TRUE,
star.cutoffs = c(0.05, 0.01, 0.001),
notes = c("*** p<0.001", "** p<0.01", "* p<0.05"),
notes.align = "l", notes.label = "Significance levels:")
testProbs <-
data.frame(class = test$gentrify,
probs = predict(reg.gentrify, test, type = "response"))
testProbs %>%
mutate(predClass = ifelse(probs >= .5, "1", "0"),
predClass = factor(predClass, levels = c("0", "1")),
class = factor(class, levels = c("0", "1"))) %>%
{ caret::confusionMatrix(.$predClass, .$class, positive = "1") }
p_load(ggplot2)
palette_4_colors <- c("#e4572e","#17bebb","#ffc914","#A379C9")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
ggplot(testProbs, aes(x = probs, fill = as.factor(class))) +
geom_density() +
facet_grid(class ~ .) +
scale_fill_manual(values = palette_4_colors) + xlim(0, 1) +
labs(x = "Gentrify", y = "Density of probabilities",
title = "Distribution of predicted probabilities by observed outcome") +
plotTheme() + theme(strip.text.x = element_text(size = 18),
legend.position = "none")+
theme(text = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 8))
#Businesses by community statistical areas
bmore_business <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Neiind/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_business)
school_outcome <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Pread3/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_school)
#walk score
walk_score <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Wlksc/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(walk_score)
View(bmore_p_lots)
#percentage of vacant lots
bmore_p_lots <- bmore_p_lots %>%
select(CSA2020, vacant21, geometry) %>%
rename(CSA = CSA2020,
p_vacant = vacant21)
#Percentage of vacant lots
bmore_p_lots <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Vacant/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#percentage of vacant lots
bmore_p_lots <- bmore_p_lots %>%
select(CSA2020, vacant21, geometry) %>%
rename(CSA = CSA2020,
p_vacant = vacant21)
View(bmore_business)
#number of businesses
bmore_business <- bmore_business %>%
mutate(changebiz = neiind19 - neiind10)%>%
select(CSA2020, neiind21, geometry, changebiz) %>%
rename(CSA = CSA2020,
business_count = neiind21)
#number of businesses
bmore_business <- bmore_business %>%
mutate(changebiz = neiind19 - neiind10)%>%
select(CSA2010, neiind21, geometry, changebiz) %>%
rename(CSA = CSA2010,
business_count = neiind21)
#Businesses by community statistical areas
bmore_business <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Neiind/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#number of businesses
bmore_business <- bmore_business %>%
mutate(changebiz = neiind19 - neiind10)%>%
select(CSA2010, neiind21, geometry, changebiz) %>%
rename(CSA = CSA2010,
business_count = neiind21)
school_outcome <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Pread3/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(school_outcome)
#percentage of 3rd grade students who met math test target
school_outcome <- school_outcome %>%
select(CSA2010, pread317, geometry) %>%
rename(CSA = CSA2010,
p_students = pread317)
View(walk_score)
#walk score
walk_score <- walk_score %>%
mutate(changewalk = walksc17 - wlksc11)%>%
select(CSA2010, wlksc17, geometry, changewalk) %>%
rename(CSA = CSA2010,
walk_score = wlksc17)
#walk score
walk_score <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Wlksc/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#walk score
walk_score <- walk_score %>%
mutate(changewalk = walksc17 - wlksc11)%>%
select(CSA2010, wlksc17, geometry, changewalk) %>%
rename(CSA = CSA2010,
walk_score = wlksc17)
View(bmore_bids)
