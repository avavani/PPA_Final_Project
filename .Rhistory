ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = walk_score_csa, aes(fill = changewalk), col = "transparent") +
scale_fill_gradient(
high = "#861D05",
low = "#F5B5AC") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Change in Walk Score",
title = "201? to 2022 Change in Walk Score",
subtitle = "Baltimore City, MD")
#change in walk score
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = walk_score_csa, aes(fill = changewalk), col = "transparent") +
scale_fill_gradient(
high = "#861D05",
low = "#F5B5AC") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Change in Walk Score",
title = "2011 to 2017 Change in Walk Score",
subtitle = "Baltimore City, MD")
library(tmap)
View(all.acs.sf)
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "transparent") +
scale_fill_gradient(
high = "#861D05",
low = "#F5B5AC") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "transparent") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "white") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "gray50") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "gray80") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "gray60") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "navy") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "navy") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = gentrify), col = "cornflowerblue") +
scale_fill_gradient(
high = "#174B86",
low = "#B4CFF5") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrification",
title = "2022 Gentrified Census Tracts",
subtitle = "Baltimore City, MD")
#2022 Median Household Income
bmore_hhinc22 <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Majority Non-White
bmore_nonwhite22 <- get_acs(
geography = "tract",
variables = c(tot = "B03002_001", white = "B03002_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(nonwhite = 1 - (white/tot))
#2022 Majority Owner
bmore_pcentoo22 <- get_acs(
geography = "tract",
variables = c(tot = "B25003_001", oo = "B25003_002", ro = "B25003_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(propoo = (oo/tot))
#2022 Median Home Value
bmore_hv22 <- get_acs(
geography = "tract",
variables = "B25077_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Median Rent
bmore_rent22 <- get_acs(
geography = "tract",
variables = "B25031_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Median Household Income
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = bmore_hhinc22, aes(fill = estimate), col = "transparent") +
scale_fill_gradient(
high = "#00473B",
low = "#A1E4CC",
labels = scales::dollar) +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Median Household Income",
title = "2022 Median Household Income",
subtitle = "Baltimore City, MD")
#2022 Median Home Value
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = bmore_hv22, aes(fill = estimate), col = "transparent") +
scale_fill_gradient(
high = "orangered4",
low = "lightgoldenrod1",
labels = scales::dollar) +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Median Home Value",
title = "2022 Median Home Value",
subtitle = "Baltimore City, MD")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(pacman)
p_load(dplyr, ggplot2, sf, stats, tidycensus, tidyr, mapview, tigris, tmap, tidyverse, dplyr)
options(tigris_use_cache = TRUE)
md_bound <- counties(state = "MD") %>%
st_transform("EPSG:4269") %>%
erase_water(area_threshold = 0.9)
water_bound <- st_as_sfc(st_bbox(md_bound), crs = "EPSG:4269")
patapsco <- st_read("https://gisdata.baltimorecity.gov/egis/rest/services/OpenBaltimore/Water/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
bmorecsa <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Community_Statistical_Areas_(CSAs)__Reference_Boundaries/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#Getting my ACS Variable List
acs_variable_list.2012 <- load_variables(2012,
"acs5",
cache = TRUE)
acs_variable_list.2022 <- load_variables(2022,
"acs5",
cache = TRUE)
#Picking out my variables of interest
acs_vars <- c("B01001_001E",# ACS total Pop estimate
"B25002_001E",# Estimate of total housing units
"B25002_003E",# Number of vacant housing units
"B19013_001E",# Median HH Income ($)
"B02001_002E",# People describing themselves as "white alone"
"B06009_006E", # Total graduate or professional degree
"B07001_033E", #moved in within same county
"B07001_049E", #moved in from same state
"B07001_065E", #moved in different state
"B07001_081E", #moved from abroad
"B06009_005E", #bachelors degree
"B25010_002E", #owner occupied household size
"B25010_003E", #renter occupied HH size
"B11016_002E", #family households
"B11016_009E", #non family households
"B25064_001E", #MEDIAN GROSS RENT
"B25077_001E") #MEDIAN HOME VALUE
#Extracting the data for 2012
bmore_acs17 <- get_acs(
geography = "tract",
variables = acs_vars,
state = "MD",
county = "Baltimore City",
year = 2017,
output = "wide")%>%
rename(TotalPopulation17 = B01001_001E,
TotalHousingUnits17 = B25002_001E,
VacantHousingUnits17 = B25002_003E,
MedianHouseholdIncome17 = B19013_001E,
WhiteAlone17 = B02001_002E,
GradProfessionalDegree17 = B06009_006E,
MovedWithinCounty17 = B07001_033E,
MovedFromSameState17 = B07001_049E,
MovedFromDifferentState17 = B07001_065E,
MovedAbroad17 = B07001_081E,
BachelorsDegree17 = B06009_005E,
OwnerOccupiedHouseholdSize17 = B25010_002E,
RenterOccupiedSize17 = B25010_003E,
FamilyHouseholds17 = B11016_002E,
NonFamilyHouseholds17 = B11016_009E,
MedianRent17 = B25064_001E,
MedianHomeValue17 = B25077_001E)%>%
mutate(inflation.adjHH17 = MedianHouseholdIncome17 * 1.16,
MedianRent17 = MedianRent17 * 1.16,
MedianHomeValue17 = MedianHomeValue17 *1.16)%>%
select(GEOID,NAME,ends_with("17"))
#extracting my data for 2022
bmore_acs22 <- get_acs(
geography = "tract",
variables = acs_vars,
state = "MD",
county = "Baltimore City",
year = 2022,
output = "wide")%>%
rename(TotalPopulation22 = B01001_001E,
TotalHousingUnits22 = B25002_001E,
VacantHousingUnits22 = B25002_003E,
MedianHouseholdIncome22 = B19013_001E,
WhiteAlone22 = B02001_002E,
GradProfessionalDegree22 = B06009_006E,
MovedWithinCounty22 = B07001_033E,
MovedFromSameState22 = B07001_049E,
MovedFromDifferentState22 = B07001_065E,
MovedAbroad22 = B07001_081E,
BachelorsDegree22 = B06009_005E,
OwnerOccupiedHouseholdSize22 = B25010_002E,
RenterOccupiedSize22 = B25010_003E,
FamilyHouseholds22 = B11016_002E,
NonFamilyHouseholds22 = B11016_009E,
MedianRent22 = B25064_001E,
MedianHomeValue22 = B25077_001E)%>%
select(GEOID,NAME,ends_with("22"))
#one census tract has been combined in 2022. So I am adjusting this info in 2012 and joining back
changed_22 <- bmore_acs17 %>%
filter(NAME %in% c("Census Tract 1801, Baltimore city, Maryland",
"Census Tract 1802, Baltimore city, Maryland"))%>%
dplyr::summarize(
TotalPopulation17 = sum(TotalPopulation17),
TotalHousingUnits17 = sum(TotalHousingUnits17),
VacantHousingUnits17 = sum(VacantHousingUnits17),
MedianHouseholdIncome17 = mean(MedianHouseholdIncome17),
WhiteAlone17 = sum(WhiteAlone17),
GradProfessionalDegree17 = sum(GradProfessionalDegree17),
MovedWithinCounty17 = sum(MovedWithinCounty17),
MovedFromSameState17 = sum(MovedFromSameState17),
MovedFromDifferentState17 = sum(MovedFromDifferentState17),
MovedAbroad17 = sum(MovedAbroad17),
BachelorsDegree17 = sum(BachelorsDegree17),
OwnerOccupiedHouseholdSize17 = mean(OwnerOccupiedHouseholdSize17),
RenterOccupiedSize17 = mean(RenterOccupiedSize17),
FamilyHouseholds17 = sum(FamilyHouseholds17),
NonFamilyHouseholds17 = sum(NonFamilyHouseholds17),
inflation.adjHH17 = mean(inflation.adjHH17),
MedianRent17 = mean(MedianRent17),
MedianHomeValue17 = mean(MedianRent17)
) %>%
dplyr::mutate(
NAME = "Census Tract 2806, Baltimore city, Maryland",
GEOID = "24510280600"
)
#joining back adjusted info
bmore_acs17 <- bmore_acs17 %>%
filter(!(NAME %in% c("Census Tract 1801, Baltimore city, Maryland",
"Census Tract 1802, Baltimore city, Maryland"))) %>%
bind_rows(changed_22)
all.acs <- bmore_acs17 %>%
left_join(bmore_acs22, by = "GEOID") %>%
mutate(
PopChangePct = if_else(TotalPopulation17 != 0, ((TotalPopulation22 - TotalPopulation17) / TotalPopulation17) * 100, 0),
HUnitsPctChange = if_else(TotalHousingUnits17 != 0, ((TotalHousingUnits22 - TotalHousingUnits17) / TotalHousingUnits17) * 100, 0),
VacantUnitsPctChange = if_else(VacantHousingUnits17 != 0, ((VacantHousingUnits22 - VacantHousingUnits17) / VacantHousingUnits17) * 100, 0),
RentPctChange = if_else(MedianRent17 != 0, ((MedianRent22 - MedianRent17) / MedianRent17) * 100, 0),
HomeValuePctChange = if_else(MedianHomeValue17 != 0, ((MedianHomeValue22 - MedianHomeValue17) / MedianHomeValue17) * 100, 0),
IncPctChange = if_else(MedianHouseholdIncome17 != 0, ((MedianHouseholdIncome22 - MedianHouseholdIncome17) / MedianHouseholdIncome17) * 100, 0),
WhiteAlonePct17 = if_else(TotalPopulation17 != 0, WhiteAlone17 / TotalPopulation17 * 100, 0),
WhiteAlonePct22 = if_else(TotalPopulation22 != 0, WhiteAlone22 / TotalPopulation22 * 100, 0),
GradPct17 = if_else(TotalPopulation17 != 0, GradProfessionalDegree17 / TotalPopulation17 * 100, 0),
GradPct22 = if_else(TotalPopulation22 != 0, GradProfessionalDegree22 / TotalPopulation22 * 100, 0),
CountyWWMovePct17 = if_else(TotalPopulation17 != 0, MovedWithinCounty17 / TotalPopulation17 * 100, 0),
CountyWWMovePct22 = if_else(TotalPopulation22 != 0, MovedWithinCounty22 / TotalPopulation22 * 100, 0),
SStateMovePct17 = if_else(TotalPopulation17 != 0, MovedFromSameState17 / TotalPopulation17 * 100, 0),
SStateMovePct22 = if_else(TotalPopulation22 != 0, MovedFromSameState22 / TotalPopulation22 * 100, 0),
DiffStateMovePct17 = if_else(TotalPopulation17 != 0, MovedFromDifferentState17 / TotalPopulation17 * 100, 0),
DiffStateMovePct22 = if_else(TotalPopulation22 != 0, MovedFromDifferentState22 / TotalPopulation22 * 100, 0),
AbroadMovePct17 = if_else(TotalPopulation17 != 0, MovedAbroad17 / TotalPopulation17 * 100, 0),
AbroadMovePct22 = if_else(TotalPopulation22 != 0, MovedAbroad22 / TotalPopulation22 * 100, 0),
BachelorsPct17 = if_else(TotalPopulation17 != 0, BachelorsDegree17 / TotalPopulation17 * 100, 0),
BachelorsPct22 = if_else(TotalPopulation22 != 0, BachelorsDegree22 / TotalPopulation22 * 100, 0),
WhiteAlonePctChange = if_else(WhiteAlonePct17 != 0, ((WhiteAlonePct22 - WhiteAlonePct17) / WhiteAlonePct17) * 100, 0),
GradPctChange = if_else(GradPct17 != 0, ((GradPct22 - GradPct17) / GradPct17) * 100, 0),
CountyWWMovePctChange = if_else(CountyWWMovePct17 != 0, ((CountyWWMovePct22 - CountyWWMovePct17) / CountyWWMovePct17) * 100, 0),
SStateMovePctChange = if_else(SStateMovePct17 != 0, ((SStateMovePct22 - SStateMovePct17) / SStateMovePct17) * 100, 0),
DiffStateMovePctChange = if_else(DiffStateMovePct17 != 0, ((DiffStateMovePct22 - DiffStateMovePct17) / DiffStateMovePct17) * 100, 0),
AbroadMovePctChange = if_else(AbroadMovePct17 != 0, ((AbroadMovePct22 - AbroadMovePct17) / AbroadMovePct17) * 100, 0),
BachelorsPctChange = if_else(BachelorsPct17 != 0, ((BachelorsPct22 - BachelorsPct17) / BachelorsPct17) * 100, 0),
OOSizePctChange = if_else(OwnerOccupiedHouseholdSize17 != 0, ((OwnerOccupiedHouseholdSize22 - OwnerOccupiedHouseholdSize17) / OwnerOccupiedHouseholdSize17) * 100, 0),
ROSizePctChange = if_else(RenterOccupiedSize17 != 0, ((RenterOccupiedSize22 - RenterOccupiedSize17) / RenterOccupiedSize17) * 100, 0),
FamHHPctChange = if_else(FamilyHouseholds17 != 0, ((FamilyHouseholds22 - FamilyHouseholds17) / FamilyHouseholds17) * 100, 0),
NonFamHHPctChange = if_else(NonFamilyHouseholds17 != 0, ((NonFamilyHouseholds22 - NonFamilyHouseholds17) / NonFamilyHouseholds17) * 100, 0)
) %>%
mutate(NAME = coalesce(NAME.x, NAME.y)) %>%
select(-NAME.x, -NAME.y) %>%
mutate(across(where(is.numeric), ~replace_na(., 0)),
across(where(is.numeric), ~replace(., is.infinite(.), 0)))
#2022 Median Household Income
bmore_hhinc22 <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Majority Non-White
bmore_nonwhite22 <- get_acs(
geography = "tract",
variables = c(tot = "B03002_001", white = "B03002_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(nonwhite = 1 - (white/tot))
#2022 Majority Owner
bmore_pcentoo22 <- get_acs(
geography = "tract",
variables = c(tot = "B25003_001", oo = "B25003_002", ro = "B25003_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(propoo = (oo/tot))
#2022 Median Home Value
bmore_hv22 <- get_acs(
geography = "tract",
variables = "B25077_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Median Rent
bmore_rent22 <- get_acs(
geography = "tract",
variables = "B25031_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Median Household Income
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = bmore_hhinc22, aes(fill = estimate), col = "transparent") +
scale_fill_gradient(
high = "#00473B",
low = "#A1E4CC",
labels = scales::dollar) +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Median Household Income",
title = "2022 Median Household Income",
subtitle = "Baltimore City, MD")
#2022 Median Home Value
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = bmore_hv22, aes(fill = estimate), col = "transparent") +
scale_fill_gradient(
high = "orangered4",
low = "lightgoldenrod1",
labels = scales::dollar) +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Median Home Value",
title = "2022 Median Home Value",
subtitle = "Baltimore City, MD")
detach("package:dplyr", unload = TRUE)
library(dplyr)
---
title: "Predicting Gentrification"
# Abstract
Defining and predicting gentrification is becoming more and more relevant to the average person as neighborhood residents become more concerned about getting priced out of their communities. Once something that could only be observed in hindsight, anticipating gentrification and attempting to prevent its disparate effects has become the subject of activism and counter-lobbying efforts. This report attempts to determine if gentrification can be correctly identified in Baltimore City, Maryland based on neighborhood characteristics that the average person can observe.
