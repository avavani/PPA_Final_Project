NAME = "Census Tract 2806, Baltimore city, Maryland",
GEOID = "24510280600"
)
#joining back adjusted info
bmore_acs17 <- bmore_acs17 %>%
filter(!(NAME %in% c("Census Tract 1801, Baltimore city, Maryland",
"Census Tract 1802, Baltimore city, Maryland"))) %>%
bind_rows(changed_22)
```
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(pacman)
library(dplyr)
p_load(ggplot2, sf, stats, tidycensus, tidyr, mapview, tigris, tmap, tidyverse)
options(tigris_use_cache = TRUE)
md_bound <- counties(state = "MD") %>%
st_transform("EPSG:4269") %>%
erase_water(area_threshold = 0.9)
water_bound <- st_as_sfc(st_bbox(md_bound), crs = "EPSG:4269")
patapsco <- st_read("https://gisdata.baltimorecity.gov/egis/rest/services/OpenBaltimore/Water/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
bmorecsa <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Community_Statistical_Areas_(CSAs)__Reference_Boundaries/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#Picking out my variables of interest
acs_vars <- c("B01001_001E",# ACS total Pop estimate
"B25002_001E",# Estimate of total housing units
"B25002_003E",# Number of vacant housing units
"B19013_001E",# Median HH Income ($)
"B02001_002E",# People describing themselves as "white alone"
"B06009_006E", # Total graduate or professional degree
"B07001_033E", #moved in within same county
"B07001_049E", #moved in from same state
"B07001_065E", #moved in different state
"B07001_081E", #moved from abroad
"B06009_005E", #bachelors degree
"B25010_002E", #owner occupied household size
"B25010_003E", #renter occupied HH size
"B11016_002E", #family households
"B11016_009E", #non family households
"B25064_001E", #MEDIAN GROSS RENT
"B25077_001E") #MEDIAN HOME VALUE
#Extracting the data for 2012
bmore_acs17 <- get_acs(
geography = "tract",
variables = acs_vars,
state = "MD",
county = "Baltimore City",
year = 2017,
output = "wide")%>%
rename(TotalPopulation17 = B01001_001E,
TotalHousingUnits17 = B25002_001E,
VacantHousingUnits17 = B25002_003E,
MedianHouseholdIncome17 = B19013_001E,
WhiteAlone17 = B02001_002E,
GradProfessionalDegree17 = B06009_006E,
MovedWithinCounty17 = B07001_033E,
MovedFromSameState17 = B07001_049E,
MovedFromDifferentState17 = B07001_065E,
MovedAbroad17 = B07001_081E,
BachelorsDegree17 = B06009_005E,
OwnerOccupiedHouseholdSize17 = B25010_002E,
RenterOccupiedSize17 = B25010_003E,
FamilyHouseholds17 = B11016_002E,
NonFamilyHouseholds17 = B11016_009E,
MedianRent17 = B25064_001E,
MedianHomeValue17 = B25077_001E)%>%
mutate(inflation.adjHH17 = MedianHouseholdIncome17 * 1.16,
MedianRent17 = MedianRent17 * 1.16,
MedianHomeValue17 = MedianHomeValue17 *1.16)%>%
select(GEOID,NAME,ends_with("17"))
#extracting my data for 2022
bmore_acs22 <- get_acs(
geography = "tract",
variables = acs_vars,
state = "MD",
county = "Baltimore City",
year = 2022,
output = "wide")%>%
rename(TotalPopulation22 = B01001_001E,
TotalHousingUnits22 = B25002_001E,
VacantHousingUnits22 = B25002_003E,
MedianHouseholdIncome22 = B19013_001E,
WhiteAlone22 = B02001_002E,
GradProfessionalDegree22 = B06009_006E,
MovedWithinCounty22 = B07001_033E,
MovedFromSameState22 = B07001_049E,
MovedFromDifferentState22 = B07001_065E,
MovedAbroad22 = B07001_081E,
BachelorsDegree22 = B06009_005E,
OwnerOccupiedHouseholdSize22 = B25010_002E,
RenterOccupiedSize22 = B25010_003E,
FamilyHouseholds22 = B11016_002E,
NonFamilyHouseholds22 = B11016_009E,
MedianRent22 = B25064_001E,
MedianHomeValue22 = B25077_001E)%>%
select(GEOID,NAME,ends_with("22"))
#one census tract has been combined in 2022. So I am adjusting this info in 2012 and joining back
changed_22 <- bmore_acs17 %>%
filter(NAME %in% c("Census Tract 1801, Baltimore city, Maryland",
"Census Tract 1802, Baltimore city, Maryland"))%>%
dplyr::summarize(
TotalPopulation17 = sum(TotalPopulation17),
TotalHousingUnits17 = sum(TotalHousingUnits17),
VacantHousingUnits17 = sum(VacantHousingUnits17),
MedianHouseholdIncome17 = mean(MedianHouseholdIncome17),
WhiteAlone17 = sum(WhiteAlone17),
GradProfessionalDegree17 = sum(GradProfessionalDegree17),
MovedWithinCounty17 = sum(MovedWithinCounty17),
MovedFromSameState17 = sum(MovedFromSameState17),
MovedFromDifferentState17 = sum(MovedFromDifferentState17),
MovedAbroad17 = sum(MovedAbroad17),
BachelorsDegree17 = sum(BachelorsDegree17),
OwnerOccupiedHouseholdSize17 = mean(OwnerOccupiedHouseholdSize17),
RenterOccupiedSize17 = mean(RenterOccupiedSize17),
FamilyHouseholds17 = sum(FamilyHouseholds17),
NonFamilyHouseholds17 = sum(NonFamilyHouseholds17),
inflation.adjHH17 = mean(inflation.adjHH17),
MedianRent17 = mean(MedianRent17),
MedianHomeValue17 = mean(MedianRent17)
) %>%
dplyr::mutate(
NAME = "Census Tract 2806, Baltimore city, Maryland",
GEOID = "24510280600"
)
#joining back adjusted info
bmore_acs17 <- bmore_acs17 %>%
filter(!(NAME %in% c("Census Tract 1801, Baltimore city, Maryland",
"Census Tract 1802, Baltimore city, Maryland"))) %>%
bind_rows(changed_22)
all.acs <- bmore_acs17 %>%
left_join(bmore_acs22, by = "GEOID") %>%
mutate(
PopChangePct = if_else(TotalPopulation17 != 0, ((TotalPopulation22 - TotalPopulation17) / TotalPopulation17) * 100, 0),
HUnitsPctChange = if_else(TotalHousingUnits17 != 0, ((TotalHousingUnits22 - TotalHousingUnits17) / TotalHousingUnits17) * 100, 0),
VacantUnitsPctChange = if_else(VacantHousingUnits17 != 0, ((VacantHousingUnits22 - VacantHousingUnits17) / VacantHousingUnits17) * 100, 0),
RentPctChange = if_else(MedianRent17 != 0, ((MedianRent22 - MedianRent17) / MedianRent17) * 100, 0),
HomeValuePctChange = if_else(MedianHomeValue17 != 0, ((MedianHomeValue22 - MedianHomeValue17) / MedianHomeValue17) * 100, 0),
IncPctChange = if_else(MedianHouseholdIncome17 != 0, ((MedianHouseholdIncome22 - MedianHouseholdIncome17) / MedianHouseholdIncome17) * 100, 0),
WhiteAlonePct17 = if_else(TotalPopulation17 != 0, WhiteAlone17 / TotalPopulation17 * 100, 0),
WhiteAlonePct22 = if_else(TotalPopulation22 != 0, WhiteAlone22 / TotalPopulation22 * 100, 0),
GradPct17 = if_else(TotalPopulation17 != 0, GradProfessionalDegree17 / TotalPopulation17 * 100, 0),
GradPct22 = if_else(TotalPopulation22 != 0, GradProfessionalDegree22 / TotalPopulation22 * 100, 0),
CountyWWMovePct17 = if_else(TotalPopulation17 != 0, MovedWithinCounty17 / TotalPopulation17 * 100, 0),
CountyWWMovePct22 = if_else(TotalPopulation22 != 0, MovedWithinCounty22 / TotalPopulation22 * 100, 0),
SStateMovePct17 = if_else(TotalPopulation17 != 0, MovedFromSameState17 / TotalPopulation17 * 100, 0),
SStateMovePct22 = if_else(TotalPopulation22 != 0, MovedFromSameState22 / TotalPopulation22 * 100, 0),
DiffStateMovePct17 = if_else(TotalPopulation17 != 0, MovedFromDifferentState17 / TotalPopulation17 * 100, 0),
DiffStateMovePct22 = if_else(TotalPopulation22 != 0, MovedFromDifferentState22 / TotalPopulation22 * 100, 0),
AbroadMovePct17 = if_else(TotalPopulation17 != 0, MovedAbroad17 / TotalPopulation17 * 100, 0),
AbroadMovePct22 = if_else(TotalPopulation22 != 0, MovedAbroad22 / TotalPopulation22 * 100, 0),
BachelorsPct17 = if_else(TotalPopulation17 != 0, BachelorsDegree17 / TotalPopulation17 * 100, 0),
BachelorsPct22 = if_else(TotalPopulation22 != 0, BachelorsDegree22 / TotalPopulation22 * 100, 0),
WhiteAlonePctChange = if_else(WhiteAlonePct17 != 0, ((WhiteAlonePct22 - WhiteAlonePct17) / WhiteAlonePct17) * 100, 0),
GradPctChange = if_else(GradPct17 != 0, ((GradPct22 - GradPct17) / GradPct17) * 100, 0),
CountyWWMovePctChange = if_else(CountyWWMovePct17 != 0, ((CountyWWMovePct22 - CountyWWMovePct17) / CountyWWMovePct17) * 100, 0),
SStateMovePctChange = if_else(SStateMovePct17 != 0, ((SStateMovePct22 - SStateMovePct17) / SStateMovePct17) * 100, 0),
DiffStateMovePctChange = if_else(DiffStateMovePct17 != 0, ((DiffStateMovePct22 - DiffStateMovePct17) / DiffStateMovePct17) * 100, 0),
AbroadMovePctChange = if_else(AbroadMovePct17 != 0, ((AbroadMovePct22 - AbroadMovePct17) / AbroadMovePct17) * 100, 0),
BachelorsPctChange = if_else(BachelorsPct17 != 0, ((BachelorsPct22 - BachelorsPct17) / BachelorsPct17) * 100, 0),
OOSizePctChange = if_else(OwnerOccupiedHouseholdSize17 != 0, ((OwnerOccupiedHouseholdSize22 - OwnerOccupiedHouseholdSize17) / OwnerOccupiedHouseholdSize17) * 100, 0),
ROSizePctChange = if_else(RenterOccupiedSize17 != 0, ((RenterOccupiedSize22 - RenterOccupiedSize17) / RenterOccupiedSize17) * 100, 0),
FamHHPctChange = if_else(FamilyHouseholds17 != 0, ((FamilyHouseholds22 - FamilyHouseholds17) / FamilyHouseholds17) * 100, 0),
NonFamHHPctChange = if_else(NonFamilyHouseholds17 != 0, ((NonFamilyHouseholds22 - NonFamilyHouseholds17) / NonFamilyHouseholds17) * 100, 0)
) %>%
mutate(NAME = coalesce(NAME.x, NAME.y)) %>%
select(-NAME.x, -NAME.y) %>%
mutate(across(where(is.numeric), ~replace_na(., 0)),
across(where(is.numeric), ~replace(., is.infinite(.), 0)))
#2022 Median Household Income
bmore_hhinc22 <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Majority Non-White
bmore_nonwhite22 <- get_acs(
geography = "tract",
variables = c(tot = "B03002_001", white = "B03002_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(nonwhite = 1 - (white/tot))
#2022 Majority Owner
bmore_pcentoo22 <- get_acs(
geography = "tract",
variables = c(tot = "B25003_001", oo = "B25003_002", ro = "B25003_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(propoo = (oo/tot))
#2022 Median Home Value
bmore_hv22 <- get_acs(
geography = "tract",
variables = "B25077_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Median Rent
bmore_rent22 <- get_acs(
geography = "tract",
variables = "B25031_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#Getting population by Income numbers
bmore_ctmedhhinc12 <- get_acs(
geography = "tract",
variables = c(tot = "B19001_001",
L = "B19001_002", L = "B19001_003", L = "B19001_004", L = "B19001_005", L = "B19001_006",
H = "B19001_007", H = "B19001_008", H = "B19001_009", H = "B19001_010", H = "B19001_011",
H = "B19001_012", H = "B19001_013", H = "B19001_014", H = "B19001_015", H = "B19001_016",
H = "B19001_017"),
state = "MD",
county = "Baltimore City",
year = 2012,
geometry = FALSE
) %>%
select(GEOID, variable, estimate) %>%
rename(est12 = estimate, var12 = variable) %>%
group_by(GEOID, var12) %>%
summarise(est12 = sum(est12)) %>%
pivot_wider(names_from = var12, values_from = est12) %>%
mutate(percentHighInc12 = H/tot, percentLowInc12 = L/tot)
#adjusting for joined census tracts
changed_22Inc <- bmore_ctmedhhinc12 %>%
filter(GEOID %in% c("24510180100", "24510180200")) %>%
ungroup() %>%
summarize(H = sum(H), L = sum(L), tot = sum(tot)) %>%
mutate(percentHighInc12 = H / tot,
percentLowInc12 = L / tot) %>%
mutate(GEOID = "24510280600")
#joining info back to 2012
bmore_ctmedhhinc12 <- bmore_ctmedhhinc12 %>%
ungroup()%>%
filter(!(GEOID %in% c("24510180100", "24510180200"))) %>%
bind_rows(changed_22Inc)
#getting HH income for 2022
bmore_ctmedhhinc22 <- get_acs(
geography = "tract",
variables = c(tot = "B19001_001",
L = "B19001_002", L = "B19001_003", L = "B19001_004", L = "B19001_005", L = "B19001_006",
L = "B19001_007", L = "B19001_008", L = "B19001_009", H = "B19001_010", H = "B19001_011",
H = "B19001_012", H = "B19001_013", H = "B19001_014", H = "B19001_015", H = "B19001_016",
H = "B19001_017"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = FALSE
) %>%
select(GEOID, variable, estimate) %>%
rename(est22 = estimate, var22 = variable) %>%
group_by(GEOID, var22) %>%
summarise(est22 = sum(est22)) %>%
pivot_wider(names_from = var22, values_from = est22) %>%
mutate(percentHighInc22 = H/tot, percentLowInc22 = L/tot)
#joining all
bmore_hhinc_change <- left_join(bmore_ctmedhhinc12, bmore_ctmedhhinc22, by = "GEOID") %>%
select(GEOID, percentHighInc12, percentHighInc22, percentLowInc12, percentLowInc22)
#creating my final dataset
all.acs <- left_join(all.acs, bmore_hhinc_change)%>%
mutate(ChangeInHighIncPct = (percentHighInc22 - percentHighInc12),
ChangeInLowIncPct = (percentLowInc22 - percentLowInc12))
#getting my index
all.acs <- all.acs %>%
mutate(genindex = ((ChangeInHighIncPct + HomeValuePctChange + RentPctChange)))
all.acs <- all.acs %>%
mutate(gentrify = case_when((genindex > (quantile(all.acs$genindex, 0.75, na.rm = TRUE)))~ 1,
TRUE ~ 0))
baltimore_tracts <- tracts(state = "MD", county = "Baltimore City", year = 2022)
all.acs.sf <- left_join(baltimore_tracts, all.acs, by = "GEOID")%>%
st_as_sf()
all.acs.sf.g <- all.acs.sf %>%
dplyr::select(GEOID, gentrify) %>%
mutate(gentrify = as.factor(gentrify))
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = all.acs.sf, aes(fill = as.factor(gentrify)), col = "#756059") +
scale_fill_manual(values = c("#5FA08F", "#F56A40"),
labels = c("No", "Yes")) +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Gentrified?",
title = "2022 Gentrification per Census Tract",
subtitle = "Baltimore City, MD")
#Open-Bid List - Vacants to Value
bmore_bids <- st_read("https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/7/query?outFields=*&where=1%3D1&f=geojson")%>%
st_transform(crs = st_crs(baltimore_tracts))%>%
st_join(baltimore_tracts)%>%
group_by(GEOID)%>%
tally()%>%
st_drop_geometry()%>%
rename(tractbids = n)
#Universities & colleges?
bmore_colleges <- st_read("https://services1.arcgis.com/UWYHeuuJISiGmgXx/arcgis/rest/services/Universities_and_Colleges/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")%>%
st_transform(crs = st_crs(baltimore_tracts))
#Businesses by community statistical areas
bmore_business <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Neiind/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")%>%
mutate(changebiz = neiind19 - neiind10)%>%
select(CSA2020, neiind21, geometry, changebiz) %>%
rename(CSA = CSA2020,
business_count = neiind21)
#Percentage of vacant lots
bmore_p_lots <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Vacant/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson") %>%
select(CSA2020, vacant21, geometry) %>%
rename(CSA = CSA2020,
p_vacant = vacant21)
#Baltimore schools
school_outcome <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Pread3/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")%>%
select(CSA2010, pread317, geometry) %>%
rename(CSA = CSA2010,
p_students = pread317)%>%
st_centroid()
#walk score
walk_score <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Wlksc/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")%>%
mutate(changewalk = wlksc17 - wlksc11)%>%
select(CSA2010, wlksc17, geometry, changewalk) %>%
rename(CSA = CSA2010,
walk_score = wlksc17)%>%
st_centroid()
walk_score_csa <- walk_score %>%
st_drop_geometry()
walk_score_csa <- left_join(bmorecsa, walk_score_csa, by = c("Community" = "CSA"))
p_load(nngeo,FNN,tibble, caret)
bmore_hoods <- bmore_p_lots %>%
select(-p_vacant)
bmore_CSA_data <- bmore_p_lots %>%
st_drop_geometry()%>%
left_join(bmore_business)%>%
st_as_sf()
bmore_CSA_data <- st_join(bmore_CSA_data, school_outcome, left = TRUE)%>%
mutate(CSA = coalesce(CSA.x, CSA.y)) %>%
select(-CSA.x, -CSA.y)%>%
mutate(across(everything(), ~replace_na(., 0)))
bmore_CSA_data <- st_join(bmore_CSA_data, walk_score, left = TRUE)%>%
mutate(CSA = coalesce(CSA.x, CSA.y)) %>%
select(-CSA.x, -CSA.y)%>%
mutate(across(everything(), ~replace_na(., 0)))
coldist <- baltimore_tracts
coldist$nearest_college_index <- st_nearest_feature(coldist, bmore_colleges)
coldist <- coldist %>%
rowwise() %>%
mutate(nearest_college = list(bmore_colleges[nearest_college_index, ]))
coldist <- coldist %>%
mutate(coldist = st_distance(geometry, nearest_college$geometry))%>%
select(-nearest_college_index,
-nearest_college)%>%
rename(collegedist = coldist)%>%
st_drop_geometry()
acs.hoods <- all.acs.sf %>%
st_transform(crs = st_crs(bmore_CSA_data))%>%
st_centroid()%>%
st_join(bmore_CSA_data, join = st_intersects)%>%
mutate(NAME = coalesce(NAME.x, NAME.y)) %>%
select(-NAME.x, -NAME.y)
acs.hoods <- acs.hoods %>%
left_join(coldist)
acs.hoods <- acs.hoods %>%
select(-STATEFP,
-COUNTYFP,
-TRACTCE,
-NAMELSAD,
-MTFCC,
-FUNCSTAT,
-ALAND,
-AWATER,
-INTPTLAT,
-INTPTLON,
-NAME) %>%
st_drop_geometry()%>%
left_join(bmore_bids)%>%
mutate(across(where(is.numeric), ~replace_na(., 0)),
across(where(is.character), ~replace_na(., "Unknown")))
acs.cv <- acs.hoods
acs.cv <- acs.cv %>%
left_join(baltimore_tracts)%>%
mutate(across(where(is.numeric), ~replace_na(., 0)),
across(where(is.numeric), ~replace(., is.infinite(.), 0)))%>%
mutate(walk_school = p_students * walk_score,
business2 = changebiz ^2,
upcoming = (changewalk * SStateMovePct17))
reg.vars <- c("TotalPopulation17", "TotalHousingUnits17",
"VacantHousingUnits17", "MovedFromSameState17", "MovedFromDifferentState17",
"FamilyHouseholds17", "PopChangePct", "HUnitsPctChange",
"IncPctChange", "GradPct17", "CountyWWMovePct17",
"SStateMovePct17", "BachelorsPct17", "WhiteAlonePctChange",
"GradPctChange", "CountyWWMovePctChange", "DiffStateMovePctChange",
"AbroadMovePctChange", "BachelorsPctChange", "OOSizePctChange",
"ROSizePctChange", "FamHHPctChange", "NonFamHHPctChange",
"ChangeInHighIncPct", "ChangeInLowIncPct", "gentrify",
"p_vacant", "tractbids", "walk_school",
"business2", "upcoming")
reg.spatialCV <- crossValidate(
dataset = acs.cv,
id = "GEOID",
dependentVariable = "gentrify",
indVariables = reg.vars)%>%
select(GEOID, gentrify, Prediction)%>%
mutate(error = Prediction - gentrify)
p_load(ggplot2)
palette_4_colors <- c("#e4572e","#17bebb","#ffc914","#A379C9")
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
reg.spatialCV <- crossValidate(
dataset = acs.cv,
id = "GEOID",
dependentVariable = "gentrify",
indVariables = reg.vars)%>%
select(GEOID, gentrify, Prediction)%>%
mutate(error = Prediction - gentrify)
reg.spatialCV <- crossValidate(
dataset = acs.cv,
id = "GEOID",
dependentVariable = "gentrify",
indVariables = reg.vars)%>%
select(GEOID, gentrify, Prediction)
reg.summary <- reg.spatialCV %>%
group_by(GEOID)%>%
summarize(Mean_Error = mean(Prediction - , na.rm = T),
reg.summary <- reg.spatialCV %>%
group_by(GEOID)%>%
summarize(Mean_Error = mean(Prediction - gentrify, na.rm = T),
MAE = mean(abs(Mean_Error), na.rm = T),
SD_MAE = mean(abs(Mean_Error), na.rm = T))
p_load(kableExtra)
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = reg.spatialCV, aes(fill = Prediction), col = "transparent") +
scale_fill_gradient(
high = "#862805",
low = "#EC9D1F") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Predicted GI",
title = "Predicted Gentrification Index",
subtitle = "Baltimore City, MD")
kable(reg.summary, caption = "Summary of Regression Results by GEOID",
col.names = c("GEOID", "Mean Error", "Mean Absolute Error (MAE)", "Standard Deviation of MAE (SD_MAE)"),
digits = 3)
View(reg.summary)
reg.summary %>%
mutate(MAE = mean(abs(Mean_Error), na.rm = T),
SD_MAE = mean(abs(Mean_Error), na.rm = T))%>%
kable()
mean(reg.summary$MAE)
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = reg.spatialCV, aes(fill = MAE), col = "transparent") +
scale_fill_gradient(
high = "#862805",
low = "#EC9D1F") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "MAE",
title = "Mean Absolute Error by Census Tract",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = reg.summary, aes(fill = MAE), col = "transparent") +
scale_fill_gradient(
high = "#862805",
low = "#EC9D1F") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "MAE",
title = "Mean Absolute Error by Census Tract",
subtitle = "Baltimore City, MD")
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = reg.summary, aes(fill = MAE), col = "transparent") +
scale_fill_gradient(
high = "#fb6f92",
low = "#ffe5ec") +
geom_sf(data = patapsco, fill = "steelblue", col = "transparent") +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "MAE",
title = "Mean Absolute Error by Census Tract",
subtitle = "Baltimore City, MD")
