#creating my final dataset
all.acs <- left_join(all.acs, bmore_hhinc_change)%>%
mutate(ChangeInHighIncPct = (percentHighInc22 - percentHighInc12),
ChangeInLowIncPct = (percentLowInc22 - percentLowInc12))
#getting my index
all.acs <- all.acs %>%
mutate(
NHHIncChangeper = HHIncChangeper / max(abs(HHIncChangeper), na.rm = TRUE),
NChangeInHighIncPct = ChangeInHighIncPct / max(abs(ChangeInHighIncPct), na.rm = TRUE),
NChangeInLowIncPct = ChangeInLowIncPct / max(abs(ChangeInLowIncPct), na.rm = TRUE)
)%>%
mutate(genindex = (0.5*NHHIncChangeper) + (0.5*NChangeInHighIncPct) - NChangeInLowIncPct)%>%
mutate(gentrify = case_when((genindex > (quantile(all.acs$genindex, 0.2, na.rm = TRUE)))~ 1,
TRUE ~ 0))
View(all.acs)
baltimore_tracts <- tracts(state = "MD", county = "Baltimore City", year = 2022)
all.acs <- left_join(baltimore_tracts, all.acs, by = "GEOID")
tm_shape(all.acs)+
tm_polygons(fill = "gentrify")
#Vacant lots
bmore_lots <- st_read("https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/7/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_lots)
bmore_business <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Neiind/FeatureServer")
#Businesses by community statistical areas
bmore_business <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Neiind/FeatureServer")
#Vacant lots
bmore_lots <- st_read("https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/7/query?outFields=*&where=1%3D1&f=geojson")
#Universities & colleges?
bmore_colleges <- st_read("https://services1.arcgis.com/UWYHeuuJISiGmgXx/arcgis/rest/services/Universities_and_Colleges/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#Businesses by community statistical areas
bmore_business <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Neiind/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_business)
View(bmore_business)
View(bmore_lots)
View(bmore_colleges)
#Vacant lots
bmore_lots <- st_read("https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/1/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_colleges)
options(scipen =999)
View(bmore_lots)
bmore_lots$DateNotice <- as.POSIXct(bmore_lots$DateNotice, format = "%Y-%m-%d %H:%M:%S")
View(bmore_lots)
#Vacant lots
bmore_lots <- st_read("https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/1/query?outFields=*&where=1%3D1&f=geojson")
#Percentage of vacant lots
bmore_p_lots <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Vacant/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_p_lots)
View(bmore_acs12)
View(bmore_acs22)
View(baltimore_tracts)
View(acs_variable_list.2012)
View(acs_variable_list.2012)
View(baltimore_tracts)
View(bmore_acs12)
#Open-Bid List - Vacants to Value
bmore_bids <- st_read("https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/7/query?outFields=*&where=1%3D1&f=geojson")
View(bmore_bids)
View(all.acs)
View(acs_variable_list.2012)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(dplyr, ggplot2, sf, stats, tidycensus, tidyr, mapview, tigris, tmap)
school_outcome <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Pread3/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(school_outcome)
View(bmore_p_lots)
View(bmore_p_lots)
bmore_p_lots <- bmore_p_lots %>%
select(CSA2020, vacant21, geometry)
rename(CSA = CSA2020,
p_vacant = vacant21)
bmore_p_lots <- bmore_p_lots %>%
select(CSA2020, vacant21, geometry) %>%
rename(CSA = CSA2020,
p_vacant = vacant21)
View(bmore_business)
bmore_business <- bmore_business %>%
select(CSA2020, neiind21, geometry) %>%
rename(CSA = CSA2020,
business_count = neiind21)
View(school_outcome)
school_outcome <- school_outcome %>%
select(CSA2010, pread317, geometry) %>%
rename(CSA = CSA2010,
p_students = pread317)
#walk score
walk_score <- st_read("https://services1.arcgis.com/mVFRs7NF4iFitgbY/arcgis/rest/services/Wlksc/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
View(walk_score)
walk_score <- walk_score %>%
select(CSA2010, wlksc17, geometry) %>%
rename(CSA = CSA2010,
walk_score = wlksc17)
View(walk_score)
#all variables
all_variables <- st_join(bmore_p_lots, bmore_business, by = CSA)
#all variables
all_variables <- st_join(bmore_p_lots, bmore_business, by = "CSA")
#all variables
all_variables <- st_join(bmore_p_lots, bmore_business)
View(all_variables)
#all variables
all_variables <- full_join(bmore_p_lots, bmore_business)
#all variables
all_variables <- st_join(bmore_p_lots, bmore_business)
#all variables
all_variables <- full_join(bmore_p_lots, bmore_business)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business, school_outcome, walk_score) %>%
```
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
full_join(school_outcome) %>%
full_join(walk_score)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_drop_geometry() %>%
full_join(school_outcome) %>%
full_join(walk_score)
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_drop_geometry() %>%
full_join(school_outcome)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
full_join(school_outcome, by = "CSA") %>%
full_join(walk_score, by = "CSA")
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_drop_geometry(school_outcome) %>%
full_join(school_outcome)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
all_variables <- all_variables %>%
st_drop_geometry() %>%
full_join(school_outcome)
all_variables <- all_variables %>%
st_drop_geometry() %>%
full_join(school_outcome)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
all_variables <- all_variables %>%
st_drop_geometry() %>%
left_join(school_outcome)
all_variables <- all_variables %>%
st_drop_geometry() %>%
left_join(school_outcome)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
all_variables <- all_variables %>%
st_drop_geometry() %>%
inner_join(school_outcome)
all_variables <- all_variables %>%
st_drop_geometry() %>%
inner_join(school_outcome)
View(bmore_p_lots)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf()
all_variables <- all_variables %>%
st_drop_geometry() %>%
full_join(school_outcome)
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf()
all_variables <- all_variables %>%
st_drop_geometry() %>%
full_join(school_outcome, by = "CSA")
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf()
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_join(school_outcome)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_join(school_outcome) %>%
st_join(walk_score)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf()
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf()
View(all_variables2)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf()
View(all_variables)
View(baltimore_tracts)
all_variables <- st_intersection(all_variables, all_variables2)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf()
#CSA names are different for schools and walk score so I'm combining them separately
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf()
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
View(tracts)
#2022 Median Household Income
bmore_hhinc22 <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Majority Non-White
bmore_nonwhite22 <- get_acs(
geography = "tract",
variables = c(tot = "B03002_001", white = "B03002_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(nonwhite = 1 - (white/tot))
#2022 Majority Owner
bmore_pcentoo22 <- get_acs(
geography = "tract",
variables = c(tot = "B25003_001", oo = "B25003_002", ro = "B25003_003"),
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, variable, estimate) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(propoo = (oo/tot))
#2022 Median Home Value
bmore_hv22 <- get_acs(
geography = "tract",
variables = "B25077_001",
state = "MD",
county = "Baltimore City",
year = 2022,
geometry = TRUE
) %>%
select(GEOID, estimate)
#2022 Median Rent
#2022 Median Household Income
ggplot() +
geom_sf(data = water_bound, fill = "steelblue") +
geom_sf(data = md_bound, fill = "gray80", col = "gray75") +
geom_sf(data = bmore_hhinc22, aes(fill = estimate), col = "transparent") +
scale_fill_gradient(
high = "orangered4",
low = "lightgoldenrod1",
labels = scales::dollar) +
theme_void() +
xlim(-76.75, -76.48) +
ylim(39.2, 39.38) +
theme(legend.position = "bottom", legend.key.width = unit(1.5, "cm")) +
labs(fill = "Median Household Income",
title = "2022 Median Household Income",
subtitle = "Baltimore City, MD")
all_variables <- st_join(all_variables, tracts)
st_crs(all_variables)
st_crs(tracts)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(baltimore_tracts,
crs = st_crs(all_variables))
View(all_variables)
#CSA names are different for schools and walk score so I'm combining them separately
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(baltimore_tracts,
crs = st_crs(all_variables2))
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(all_variables,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(all_variables2,
crs = st_crs(baltimore_tracts))
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
View(tracts)
st_crs(tracts)
st_crs(all_variables)
all_variables <- st_join(all_variables, tracts)
View(all_variables)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(all_variables,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(all_variables2,
crs = st_crs(baltimore_tracts))
all_variables <- st_join(all_variables, all_variables2)
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts)
all_variables <- right_join(all_variables, tracts)
#all variables
all_variables <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(all_variables,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
all_variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(all_variables2,
crs = st_crs(baltimore_tracts))
all_variables <- st_join(all_variables, all_variables2)
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts, op = "intersects")
all_variables <- st_join(all_variables, tracts)
#all variables
lots_and_business <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(lots_and_business,
crs = st_crs(baltimore_tracts))
#all variables
variables1 <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(variables1,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(variables2,
crs = st_crs(baltimore_tracts))
all_variables <- variables1 %>%
st_join(variables2) %>%
st_drop_geometry()
View(all_variables)
View(baltimore_tracts)
#all variables
variables1 <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(variables1,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(variables2,
crs = st_crs(baltimore_tracts))
all_variables <- variables1 %>%
st_join(variables2)
all_variables <- st_join(variables1, variables2, op = "intersects")
st_transform(variables2, crs = st_crs(variables1))
all_variables <- st_join(variables1, variables2, op = "intersects")
all_variables <- st_join(all_variables, tracts)
View(all_variables)
View(bmore_bids)
View(all.acs)
View(baltimore_tracts)
if (!all(duplicated(tracts$GEOID) | duplicated(tracts$GEOID, fromLast = TRUE))) {
# Perform the spatial join
all_variables <- st_join(all_variables, tracts, by = "GEOID")
} else {
# Handle the case where GEOID is not unique
print("GEOID column in 'tracts' is not unique. Please check your data.")
}
all_variables <- st_join(all_variables, tracts, join = st_intersects)
all_variables <- all_variables %>%
group_by(GEOID.y) %>%
filter(n() == 1) %>%
ungroup()
View(all_variables)
all_variables <- st_join(variables1, variables2)
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts, join = st_intersects)
all_variables <- all_variables %>%
group_by(GEOID.y)
all_variables <- st_join(variables1, variables2)
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts, join = st_intersects)
View(all_variables)
all_variables <- all_variables %>%
group_by(GEOID) %>%
filter(n() == 1) %>%
ungroup()
View(all_variables)
#all variables
variables1 <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(variables1,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(variables2,
crs = st_crs(baltimore_tracts))
all_variables <- st_join(variables1, variables2)
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts, join = st_intersects)
all_variables <- all_variables %>%
group_by(GEOID)
View(bmore_business)
View(bmore_colleges)
View(lots_and_business)
View(school_outcome)
all_variables <- st_join(all_variables, tracts, join = st_intersects,
left=FALSE)
View(all_variables)
all_variables <- all_variables %>%
group_by(geometry) %>%
filter(n() == 1) %>%
ungroup()
View(all_variables)
#all variables
variables1 <- bmore_p_lots %>%
st_drop_geometry() %>%
full_join(bmore_business) %>%
st_as_sf() %>%
st_transform(variables1,
crs = st_crs(baltimore_tracts))
#CSA names are different for schools and walk score so I'm combining them separately
variables2 <- school_outcome %>%
st_drop_geometry() %>%
full_join(walk_score) %>%
st_as_sf() %>%
st_transform(variables2,
crs = st_crs(baltimore_tracts))
all_variables <- st_join(variables1, variables2) #I think this is where things go left
tracts <- baltimore_tracts %>%
select(GEOID, geometry)
all_variables <- st_join(all_variables, tracts, join = st_intersects,
left=FALSE)
